// Code generated by squick at 2021-07-21T14:56:47+03:00.
// squick make -table voters insert delete select:vote_id
package database

import (
	"reflect"
	"time"

	"github.com/Masterminds/squirrel"
)

type Voter struct {
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
	UserID    int64     `db:"user_id" json:"userID"`
	VoteID    int       `db:"vote_id" json:"voteID"`
	IdeaID    int       `db:"idea_id" json:"ideaID"`

	db *DB
}

func (db *DB) InsertVoter(voter Voter) (userID int64, _ error) {
	data := map[string]interface{}{
		"created_at": voter.CreatedAt,
		"user_id":    voter.UserID,
		"vote_id":    voter.VoteID,
		"idea_id":    voter.IdeaID,
	}
	for _, col := range voterColumns {
		if reflect.ValueOf(data[col]).IsZero() {
			delete(data, col)
		}
	}

	var (
		cols []string
		vals []interface{}
	)
	for col, val := range data {
		cols = append(cols, col)
		vals = append(vals, val)
	}

	query, args, err := squirrel.
		Insert("voters").
		Columns(cols...).
		Values(vals...).
		Suffix(`RETURNING "user_id"`).
		PlaceholderFormat(squirrel.Dollar).
		ToSql()
	if err != nil {
		return userID, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return userID, err
	}
	if rows.Next() {
		rows.Scan(&userID)
	}

	return
}

func (db *DB) DeleteVoter(userID int64) error {
	const query = `DELETE FROM voters WHERE user_id=$1`
	_, err := db.Exec(query, userID)
	return err
}

func (db *DB) VotersByVoteID(voteID int) ([]Voter, error) {
	const query = `SELECT * FROM voters WHERE vote_id=$1`

	var voters []Voter
	if err := db.Select(&voters, query, voteID); err != nil {
		return nil, err
	}

	for i := range voters {
		voters[i].db = db
	}

	return voters, nil
}

var voterColumns = []string{
	"created_at",
	"user_id",
	"vote_id",
	"idea_id",
}
