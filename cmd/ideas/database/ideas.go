// Code generated by squick at 2021-07-21T14:56:47+03:00.
// squick make -table ideas insert get:id select:used,deleted set:used,deleted
package database

import (
	"reflect"

	"github.com/Masterminds/squirrel"
)

type Idea struct {
	ID          int    `db:"id" json:"id"`
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
	Emoji       string `db:"emoji" json:"emoji"`
	Used        bool   `db:"used" json:"used"`
	Deleted     bool   `db:"deleted" json:"deleted"`

	db *DB
}

func (db *DB) InsertIdea(idea Idea) (id int, _ error) {
	data := map[string]interface{}{
		"id":          idea.ID,
		"title":       idea.Title,
		"description": idea.Description,
		"emoji":       idea.Emoji,
		"used":        idea.Used,
		"deleted":     idea.Deleted,
	}
	for _, col := range ideaColumns {
		if reflect.ValueOf(data[col]).IsZero() {
			delete(data, col)
		}
	}

	var (
		cols []string
		vals []interface{}
	)
	for col, val := range data {
		cols = append(cols, col)
		vals = append(vals, val)
	}

	query, args, err := squirrel.
		Insert("ideas").
		Columns(cols...).
		Values(vals...).
		Suffix(`RETURNING "id"`).
		PlaceholderFormat(squirrel.Dollar).
		ToSql()
	if err != nil {
		return id, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return id, err
	}
	if rows.Next() {
		rows.Scan(&id)
	}

	return
}

func (db *DB) IdeaByID(id int) (idea Idea, _ error) {
	idea.db = db
	const query = `SELECT * FROM ideas WHERE id=$1`
	return idea, db.Get(&idea, query, id)
}

func (db *DB) IdeasByUsed(used bool) ([]Idea, error) {
	const query = `SELECT * FROM ideas WHERE used=$1`

	var ideas []Idea
	if err := db.Select(&ideas, query, used); err != nil {
		return nil, err
	}

	for i := range ideas {
		ideas[i].db = db
	}

	return ideas, nil
}

func (db *DB) IdeasByDeleted(deleted bool) ([]Idea, error) {
	const query = `SELECT * FROM ideas WHERE deleted=$1`

	var ideas []Idea
	if err := db.Select(&ideas, query, deleted); err != nil {
		return nil, err
	}

	for i := range ideas {
		ideas[i].db = db
	}

	return ideas, nil
}

func (idea *Idea) SetUsed(used bool) error {
	idea.Used = used
	const query = `UPDATE ideas SET used=$1 WHERE id=$2`
	_, err := idea.db.Exec(query, used, idea.ID)
	return err
}

func (idea *Idea) SetDeleted(deleted bool) error {
	idea.Deleted = deleted
	const query = `UPDATE ideas SET deleted=$1 WHERE id=$2`
	_, err := idea.db.Exec(query, deleted, idea.ID)
	return err
}

var ideaColumns = []string{
	"id",
	"title",
	"description",
	"emoji",
	"used",
	"deleted",
}
